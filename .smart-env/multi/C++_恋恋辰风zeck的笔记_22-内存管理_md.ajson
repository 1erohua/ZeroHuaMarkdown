
"smart_sources:C++/恋恋辰风zeck的笔记/22-内存管理.md": {"path":"C++/恋恋辰风zeck的笔记/22-内存管理.md","last_embed":{"hash":null},"embeddings":{},"last_read":{"hash":"d8a16f5a37c1302fa33716a42482537f796a3bfee281dd5e95bee23aa870bd56","at":1736915163175},"class_name":"SmartSource","outlinks":[{"title":"C++教程视频","target":"https://space.bilibili.com/271469206","line":12},{"title":"https://gitee.com/secondtonone1/boostasio-learn/tree/master/base/day22-memory","target":"https://gitee.com/secondtonone1/boostasio-learn/tree/master/base/day22-memory","line":1646}],"last_import":{"mtime":1736064842620,"size":33631,"at":1736915163175,"hash":"d8a16f5a37c1302fa33716a42482537f796a3bfee281dd5e95bee23aa870bd56"},"blocks":{"#---frontmatter---":[1,6],"##内存管理简介":[8,19],"##内存管理简介#{1}":[10,19],"##内存管理基础":[20,35],"##内存管理基础#{1}":[24,27],"##内存管理基础#{2}":[28,28],"##内存管理基础#{3}":[29,29],"##内存管理基础#{4}":[30,33],"##内存管理基础#{5}":[34,35],"##C 风格内存管理":[36,113],"##C 风格内存管理#`malloc` 函数":[40,60],"##C 风格内存管理#`malloc` 函数#{1}":[44,55],"##C 风格内存管理#`malloc` 函数#{2}":[56,56],"##C 风格内存管理#`malloc` 函数#{3}":[57,60],"##C 风格内存管理#`free` 函数":[61,78],"##C 风格内存管理#`free` 函数#{1}":[65,74],"##C 风格内存管理#`free` 函数#{2}":[75,78],"##C 风格内存管理#示例代码":[79,105],"##C 风格内存管理#示例代码#{1}":[83,105],"##C 风格内存管理#注意事项":[106,113],"##C 风格内存管理#注意事项#{1}":[110,110],"##C 风格内存管理#注意事项#{2}":[111,111],"##C 风格内存管理#注意事项#{3}":[112,113],"##C++ 内存管理":[114,294],"##C++ 内存管理#{1}":[118,121],"##C++ 内存管理#**`new` 操作符**":[122,233],"##C++ 内存管理#**`new` 操作符**#{1}":[126,139],"##C++ 内存管理#**`new` 操作符**#{2}":[140,189],"##C++ 内存管理#**`new` 操作符**#{3}":[144,189],"##C++ 内存管理#**`new` 操作符**#{4}":[190,233],"##C++ 内存管理#**`new` 操作符**#{5}":[194,233],"##C++ 内存管理#释放单个对象":[234,243],"##C++ 内存管理#释放单个对象#{1}":[238,243],"##C++ 内存管理#释放数组":[244,253],"##C++ 内存管理#释放数组#{1}":[248,253],"##C++ 内存管理#区别于 `malloc` 和 `free`":[254,263],"##C++ 内存管理#区别于 `malloc` 和 `free`#{1}":[258,258],"##C++ 内存管理#区别于 `malloc` 和 `free`#{2}":[259,259],"##C++ 内存管理#区别于 `malloc` 和 `free`#{3}":[260,263],"##C++ 内存管理#异常安全的 `new`":[264,294],"##C++ 内存管理#异常安全的 `new`#{1}":[268,294],"##总结和对比":[295,408],"##总结和对比#{1}":[299,313],"##总结和对比#示例对比":[314,399],"##总结和对比#示例对比#{1}":[318,399],"##总结和对比#兼容性":[400,408],"##总结和对比#兼容性#{1}":[404,404],"##总结和对比#兼容性#{2}":[405,408],"##高级内存管理":[409,612],"##高级内存管理#使用 realloc 进行内存重分配":[413,510],"##高级内存管理#使用 realloc 进行内存重分配#{1}":[417,432],"##高级内存管理#使用 realloc 进行内存重分配#{2}":[433,434],"##高级内存管理#使用 realloc 进行内存重分配#{3}":[435,439],"##高级内存管理#使用 realloc 进行内存重分配#{4}":[440,443],"##高级内存管理#使用 realloc 进行内存重分配#{5}":[444,510],"##高级内存管理#动态数组管理":[511,612],"##高级内存管理#动态数组管理#{1}":[515,612],"##实际案例":[613,847],"##实际案例#案例一：动态数组实现":[617,716],"##实际案例#案例一：动态数组实现#{1}":[621,716],"##实际案例#案例二：自定义内存管理器":[717,847],"##实际案例#案例二：自定义内存管理器#{1}":[721,837],"##实际案例#案例二：自定义内存管理器#{2}":[838,838],"##实际案例#案例二：自定义内存管理器#{3}":[839,839],"##实际案例#案例二：自定义内存管理器#{4}":[840,843],"##实际案例#案例二：自定义内存管理器#{5}":[844,847],"##避免内存泄漏":[848,894],"##避免内存泄漏#{1}":[852,855],"##避免内存泄漏#{2}":[856,856],"##避免内存泄漏#{3}":[857,857],"##避免内存泄漏#{4}":[858,861],"##避免内存泄漏#{5}":[862,894],"##`RAII`（资源获取即初始化）":[895,1338],"##`RAII`（资源获取即初始化）#{1}":[899,908],"##`RAII`（资源获取即初始化）#**`SimpleSharedPtr` 的基本概念**":[909,920],"##`RAII`（资源获取即初始化）#**`SimpleSharedPtr` 的基本概念**#{1}":[911,914],"##`RAII`（资源获取即初始化）#**`SimpleSharedPtr` 的基本概念**#{2}":[915,915],"##`RAII`（资源获取即初始化）#**`SimpleSharedPtr` 的基本概念**#{3}":[916,916],"##`RAII`（资源获取即初始化）#**`SimpleSharedPtr` 的基本概念**#{4}":[917,920],"##`RAII`（资源获取即初始化）#**引用计数控制块的设计**":[921,944],"##`RAII`（资源获取即初始化）#**引用计数控制块的设计**#{1}":[925,928],"##`RAII`（资源获取即初始化）#**引用计数控制块的设计**#{2}":[929,929],"##`RAII`（资源获取即初始化）#**引用计数控制块的设计**#{3}":[930,933],"##`RAII`（资源获取即初始化）#**引用计数控制块的设计**#{4}":[934,944],"##`RAII`（资源获取即初始化）#`SimpleSharedPtr` 的实现":[945,1016],"##`RAII`（资源获取即初始化）#`SimpleSharedPtr` 的实现#{1}":[949,970],"##`RAII`（资源获取即初始化）#`SimpleSharedPtr` 的实现#{2}":[971,971],"##`RAII`（资源获取即初始化）#`SimpleSharedPtr` 的实现#{3}":[972,972],"##`RAII`（资源获取即初始化）#`SimpleSharedPtr` 的实现#{4}":[973,1016],"##`RAII`（资源获取即初始化）#`SimpleSharedPtr` 的实现#{5}":[975,1016],"##`RAII`（资源获取即初始化）#拷贝构造与拷贝赋值":[1017,1051],"##`RAII`（资源获取即初始化）#拷贝构造与拷贝赋值#{1}":[1021,1051],"##`RAII`（资源获取即初始化）#移动构造与移动赋值":[1052,1086],"##`RAII`（资源获取即初始化）#移动构造与移动赋值#{1}":[1056,1086],"##`RAII`（资源获取即初始化）#操作符重载":[1087,1108],"##`RAII`（资源获取即初始化）#操作符重载#{1}":[1091,1108],"##`RAII`（资源获取即初始化）#其他成员函数":[1109,1146],"##`RAII`（资源获取即初始化）#其他成员函数#{1}":[1113,1113],"##`RAII`（资源获取即初始化）#其他成员函数#{2}":[1114,1114],"##`RAII`（资源获取即初始化）#其他成员函数#{3}":[1115,1146],"##`RAII`（资源获取即初始化）#其他成员函数#{4}":[1119,1146],"##`RAII`（资源获取即初始化）#完整代码示例":[1147,1338],"##`RAII`（资源获取即初始化）#完整代码示例#{1}":[1151,1338],"##`SimpleUniquePtr` 的实现":[1339,1641],"##`SimpleUniquePtr` 的实现#{1}":[1343,1346],"##`SimpleUniquePtr` 的实现#基本结构":[1347,1369],"##`SimpleUniquePtr` 的实现#基本结构#{1}":[1351,1369],"##`SimpleUniquePtr` 的实现#构造函数与析构函数":[1370,1394],"##`SimpleUniquePtr` 的实现#构造函数与析构函数#{1}":[1374,1374],"##`SimpleUniquePtr` 的实现#构造函数与析构函数#{2}":[1375,1375],"##`SimpleUniquePtr` 的实现#构造函数与析构函数#{3}":[1376,1394],"##`SimpleUniquePtr` 的实现#构造函数与析构函数#{4}":[1380,1394],"##`SimpleUniquePtr` 的实现#删除拷贝构造与拷贝赋值":[1395,1412],"##`SimpleUniquePtr` 的实现#删除拷贝构造与拷贝赋值#{1}":[1399,1412],"##`SimpleUniquePtr` 的实现#移动语义":[1413,1439],"##`SimpleUniquePtr` 的实现#移动语义#{1}":[1417,1439],"##`SimpleUniquePtr` 的实现#操作符重载":[1440,1479],"##`SimpleUniquePtr` 的实现#操作符重载#{1}":[1444,1479],"##`SimpleUniquePtr` 的实现#示例代码":[1480,1641],"##`SimpleUniquePtr` 的实现#示例代码#{1}":[1484,1634],"##`SimpleUniquePtr` 的实现#示例代码#{2}":[1635,1635],"##`SimpleUniquePtr` 的实现#示例代码#{3}":[1636,1636],"##`SimpleUniquePtr` 的实现#示例代码#{4}":[1637,1637],"##`SimpleUniquePtr` 的实现#示例代码#{5}":[1638,1641],"##总结":[1642,1654],"##总结#{1}":[1644,1654]}},