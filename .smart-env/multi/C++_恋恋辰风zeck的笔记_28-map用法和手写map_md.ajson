
"smart_sources:C++/恋恋辰风zeck的笔记/28-map用法和手写map.md": {"path":"C++/恋恋辰风zeck的笔记/28-map用法和手写map.md","last_embed":{"hash":null},"embeddings":{},"last_read":{"hash":"12a0c4f7d3996ef83c7ff454766cc6a3bf504220e0dbd580c98d6e50d5fdb7e2","at":1736915163207},"class_name":"SmartSource","outlinks":[{"title":"&","target":"AVLNode<KeyType, ValueType>* node","line":1225},{"title":"&","target":"AVLNode<KeyType, ValueType>* node","line":1692}],"last_import":{"mtime":1736064842624,"size":70568,"at":1736915163207,"hash":"12a0c4f7d3996ef83c7ff454766cc6a3bf504220e0dbd580c98d6e50d5fdb7e2"},"blocks":{"#std::map用法":[3,408],"#std::map用法#{1}":[5,8],"#std::map用法#1. 基本特性":[9,19],"#std::map用法#1. 基本特性#{1}":[13,13],"#std::map用法#1. 基本特性#{2}":[14,14],"#std::map用法#1. 基本特性#{3}":[15,15],"#std::map用法#1. 基本特性#{4}":[16,19],"#std::map用法#2. 头文件和命名空间":[20,37],"#std::map用法#2. 头文件和命名空间#{1}":[24,37],"#std::map用法#3. 声明和初始化":[38,73],"#std::map用法#3. 声明和初始化#3.1 声明一个 `std::map`":[42,55],"#std::map用法#3. 声明和初始化#3.1 声明一个 `std::map`#{1}":[46,55],"#std::map用法#3. 声明和初始化#3.2 初始化 `std::map`":[56,73],"#std::map用法#3. 声明和初始化#3.2 初始化 `std::map`#{1}":[60,73],"#std::map用法#4. 主要操作":[74,244],"#std::map用法#4. 主要操作#4.1 插入元素":[78,115],"#std::map用法#4. 主要操作#4.1 插入元素#{1}":[82,85],"#std::map用法#4. 主要操作#4.1 插入元素#4.1.1 使用 `insert` 函数":[86,99],"#std::map用法#4. 主要操作#4.1 插入元素#4.1.1 使用 `insert` 函数#{1}":[90,99],"#std::map用法#4. 主要操作#4.1 插入元素#4.1.2 使用下标运算符 `[]`":[100,115],"#std::map用法#4. 主要操作#4.1 插入元素#4.1.2 使用下标运算符 `[]`#{1}":[104,115],"#std::map用法#4. 主要操作#4.2 访问元素":[116,170],"#std::map用法#4. 主要操作#4.2 访问元素#4.2.1 使用下标运算符 `[]`":[120,133],"#std::map用法#4. 主要操作#4.2 访问元素#4.2.1 使用下标运算符 `[]`#{1}":[124,133],"#std::map用法#4. 主要操作#4.2 访问元素#4.2.2 使用 `at` 成员函数":[134,151],"#std::map用法#4. 主要操作#4.2 访问元素#4.2.2 使用 `at` 成员函数#{1}":[138,151],"#std::map用法#4. 主要操作#4.2 访问元素#4.2.3 使用 `find` 成员函数":[152,170],"#std::map用法#4. 主要操作#4.2 访问元素#4.2.3 使用 `find` 成员函数#{1}":[156,170],"#std::map用法#4. 主要操作#4.3 删除元素":[171,204],"#std::map用法#4. 主要操作#4.3 删除元素#4.3.1 使用 `erase` 函数":[175,194],"#std::map用法#4. 主要操作#4.3 删除元素#4.3.1 使用 `erase` 函数#{1}":[179,194],"#std::map用法#4. 主要操作#4.3 删除元素#4.3.2 使用 `clear` 函数":[195,204],"#std::map用法#4. 主要操作#4.3 删除元素#4.3.2 使用 `clear` 函数#{1}":[199,204],"#std::map用法#4. 主要操作#4.4 遍历 `std::map`":[205,232],"#std::map用法#4. 主要操作#4.4 遍历 `std::map`#4.4.1 使用迭代器":[209,220],"#std::map用法#4. 主要操作#4.4 遍历 `std::map`#4.4.1 使用迭代器#{1}":[213,220],"#std::map用法#4. 主要操作#4.4 遍历 `std::map`#4.4.2 使用基于范围的 `for` 循环（C++11 及以上）":[221,232],"#std::map用法#4. 主要操作#4.4 遍历 `std::map`#4.4.2 使用基于范围的 `for` 循环（C++11 及以上）#{1}":[225,232],"#std::map用法#4. 主要操作#4.5 常用成员函数":[233,244],"#std::map用法#4. 主要操作#4.5 常用成员函数#{1}":[237,237],"#std::map用法#4. 主要操作#4.5 常用成员函数#{2}":[238,238],"#std::map用法#4. 主要操作#4.5 常用成员函数#{3}":[239,239],"#std::map用法#4. 主要操作#4.5 常用成员函数#{4}":[240,240],"#std::map用法#4. 主要操作#4.5 常用成员函数#{5}":[241,244],"#std::map用法#5. 自定义键的排序":[245,293],"#std::map用法#5. 自定义键的排序#{1}":[249,252],"#std::map用法#5. 自定义键的排序#5.1 使用函数对象":[253,271],"#std::map用法#5. 自定义键的排序#5.1 使用函数对象#{1}":[257,271],"#std::map用法#5. 自定义键的排序#5.2 使用 lambda 表达式（C++11 及以上）":[272,293],"#std::map用法#5. 自定义键的排序#5.2 使用 lambda 表达式（C++11 及以上）#{1}":[276,293],"#std::map用法#6. `std::map` 与其他关联容器的比较":[294,302],"#std::map用法#6. `std::map` 与其他关联容器的比较#{1}":[298,298],"#std::map用法#6. `std::map` 与其他关联容器的比较#{2}":[299,302],"#std::map用法#7. 性能考虑":[303,321],"#std::map用法#7. 性能考虑#{1}":[307,308],"#std::map用法#7. 性能考虑#{2}":[309,313],"#std::map用法#7. 性能考虑#{3}":[314,317],"#std::map用法#7. 性能考虑#{4}":[318,321],"#std::map用法#8. 完整示例":[322,408],"#std::map用法#8. 完整示例#{1}":[326,408],"#BST实现map":[409,833],"#BST实现map#1. 选择底层数据结构":[411,418],"#BST实现map#1. 选择底层数据结构#{1}":[415,418],"#BST实现map#2. 设计数据结构":[419,705],"#BST实现map#2. 设计数据结构#2.1 节点结构":[423,450],"#BST实现map#2. 设计数据结构#2.1 节点结构#{1}":[427,450],"#BST实现map#2. 设计数据结构#2.2 Map 类的定义":[451,649],"#BST实现map#2. 设计数据结构#2.2 Map 类的定义#{1}":[455,649],"#BST实现map#2. 设计数据结构#2.3 解释":[650,705],"#BST实现map#2. 设计数据结构#2.3 解释#{1}":[654,705],"#BST实现map#3. 使用示例":[706,777],"#BST实现map#3. 使用示例#{1}":[710,755],"#BST实现map#3. 使用示例#输出结果":[756,777],"#BST实现map#3. 使用示例#输出结果#{1}":[760,777],"#BST实现map#4. 迭代器的详细实现":[778,814],"#BST实现map#4. 迭代器的详细实现#{1}":[782,785],"#BST实现map#4. 迭代器的详细实现#{2}":[786,787],"#BST实现map#4. 迭代器的详细实现#{3}":[788,790],"#BST实现map#4. 迭代器的详细实现#{4}":[791,795],"#BST实现map#4. 迭代器的详细实现#中序后继节点的查找":[796,814],"#BST实现map#4. 迭代器的详细实现#中序后继节点的查找#{1}":[800,814],"#BST实现map#5. 扩展功能":[815,833],"#BST实现map#5. 扩展功能#{1}":[819,822],"#BST实现map#5. 扩展功能#{2}":[823,824],"#BST实现map#5. 扩展功能#{3}":[825,826],"#BST实现map#5. 扩展功能#{4}":[827,828],"#BST实现map#5. 扩展功能#{5}":[829,830],"#BST实现map#5. 扩展功能#{6}":[831,833],"#AVL树":[834,1973],"#AVL树#{1}":[836,839],"#AVL树#1. 模板化AVL树节点":[840,877],"#AVL树#1. 模板化AVL树节点#{1}":[844,877],"#AVL树#2. 辅助函数的模板化":[878,987],"#AVL树#2. 辅助函数的模板化#{1}":[882,885],"#AVL树#2. 辅助函数的模板化#获取节点高度":[886,900],"#AVL树#2. 辅助函数的模板化#获取节点高度#{1}":[888,900],"#AVL树#2. 辅助函数的模板化#获取平衡因子":[901,915],"#AVL树#2. 辅助函数的模板化#获取平衡因子#{1}":[903,915],"#AVL树#2. 辅助函数的模板化#右旋转":[916,950],"#AVL树#2. 辅助函数的模板化#右旋转#{1}":[918,950],"#AVL树#2. 辅助函数的模板化#左旋转":[951,987],"#AVL树#2. 辅助函数的模板化#左旋转#{1}":[953,987],"#AVL树#3. AVL树的核心操作模板化":[988,1166],"#AVL树#3. AVL树的核心操作模板化#插入节点":[992,1050],"#AVL树#3. AVL树的核心操作模板化#插入节点#{1}":[996,1050],"#AVL树#3. AVL树的核心操作模板化#查找节点":[1051,1071],"#AVL树#3. AVL树的核心操作模板化#查找节点#{1}":[1053,1071],"#AVL树#3. AVL树的核心操作模板化#获取最小值节点":[1072,1087],"#AVL树#3. AVL树的核心操作模板化#获取最小值节点#{1}":[1074,1087],"#AVL树#3. AVL树的核心操作模板化#删除节点":[1088,1166],"#AVL树#3. AVL树的核心操作模板化#删除节点#{1}":[1090,1166],"#AVL树#4. 模板化的AVLMap类":[1167,1261],"#AVL树#4. 模板化的AVLMap类#{1}":[1171,1174],"#AVL树#4. 模板化的AVLMap类#{2}":[1175,1175],"#AVL树#4. 模板化的AVLMap类#{3}":[1176,1176],"#AVL树#4. 模板化的AVLMap类#{4}":[1177,1177],"#AVL树#4. 模板化的AVLMap类#{5}":[1178,1261],"#AVL树#4. 模板化的AVLMap类#{6}":[1182,1261],"#AVL树#5. 使用示例":[1262,1425],"#AVL树#5. 使用示例#{1}":[1266,1269],"#AVL树#5. 使用示例#示例 1：使用`int`作为键，`std::string`作为值":[1270,1347],"#AVL树#5. 使用示例#示例 1：使用`int`作为键，`std::string`作为值#{1}":[1274,1347],"#AVL树#5. 使用示例#示例 2：使用`std::string`作为键，`double`作为值":[1348,1425],"#AVL树#5. 使用示例#示例 2：使用`std::string`作为键，`double`作为值#{1}":[1352,1425],"#AVL树#6. 完整的通用代码":[1426,1806],"#AVL树#6. 完整的通用代码#{1}":[1430,1806],"#AVL树#说明":[1807,1859],"#AVL树#说明#{1}":[1811,1859],"#AVL树#7. 注意事项与扩展":[1860,1973],"#AVL树#7. 注意事项与扩展#1. 键类型的要求":[1864,1888],"#AVL树#7. 注意事项与扩展#1. 键类型的要求#{1}":[1868,1871],"#AVL树#7. 注意事项与扩展#1. 键类型的要求#{2}":[1872,1888],"#AVL树#7. 注意事项与扩展#1. 键类型的要求#{3}":[1874,1888],"#AVL树#7. 注意事项与扩展#2. 泛型支持与约束":[1889,1912],"#AVL树#7. 注意事项与扩展#2. 泛型支持与约束#{1}":[1893,1912],"#AVL树#7. 注意事项与扩展#3. 性能优化":[1913,1922],"#AVL树#7. 注意事项与扩展#3. 性能优化#{1}":[1917,1917],"#AVL树#7. 注意事项与扩展#3. 性能优化#{2}":[1918,1918],"#AVL树#7. 注意事项与扩展#3. 性能优化#{3}":[1919,1922],"#AVL树#7. 注意事项与扩展#4. 额外功能":[1923,1937],"#AVL树#7. 注意事项与扩展#4. 额外功能#{1}":[1927,1930],"#AVL树#7. 注意事项与扩展#4. 额外功能#{2}":[1931,1931],"#AVL树#7. 注意事项与扩展#4. 额外功能#{3}":[1932,1932],"#AVL树#7. 注意事项与扩展#4. 额外功能#{4}":[1933,1933],"#AVL树#7. 注意事项与扩展#4. 额外功能#{5}":[1934,1937],"#AVL树#7. 注意事项与扩展#5. 与标准库的比较":[1938,1973],"#AVL树#7. 注意事项与扩展#5. 与标准库的比较#{1}":[1942,1973],"#红黑树":[1974,2723],"#红黑树#{1}":[1976,1977],"#红黑树#1. 红黑树的五大性质":[1978,2012],"#红黑树#1. 红黑树的五大性质#{1}":[1982,1993],"#红黑树#1. 红黑树的五大性质#这些性质的意义":[1994,2012],"#红黑树#1. 红黑树的五大性质#这些性质的意义#{1}":[1998,1998],"#红黑树#1. 红黑树的五大性质#这些性质的意义#{2}":[1999,1999],"#红黑树#1. 红黑树的五大性质#这些性质的意义#{3}":[2000,2000],"#红黑树#1. 红黑树的五大性质#这些性质的意义#{4}":[2001,2004],"#红黑树#1. 红黑树的五大性质#这些性质的意义#{5}":[2005,2012],"#红黑树#2. 红黑树的插入操作":[2013,2137],"#红黑树#2. 红黑树的插入操作#{1}":[2017,2020],"#红黑树#2. 红黑树的插入操作#2.1 插入步骤概述":[2021,2033],"#红黑树#2. 红黑树的插入操作#2.1 插入步骤概述#{1}":[2025,2033],"#红黑树#2. 红黑树的插入操作#2.2 插入后的修正（Insert Fixup）":[2034,2137],"#红黑树#2. 红黑树的插入操作#2.2 插入后的修正（Insert Fixup）#{1}":[2038,2041],"#红黑树#2. 红黑树的插入操作#2.2 插入后的修正（Insert Fixup）#修正步骤：":[2042,2066],"#红黑树#2. 红黑树的插入操作#2.2 插入后的修正（Insert Fixup）#修正步骤：#{1}":[2046,2066],"#红黑树#2. 红黑树的插入操作#2.2 插入后的修正（Insert Fixup）#旋转操作的重要性":[2067,2074],"#红黑树#2. 红黑树的插入操作#2.2 插入后的修正（Insert Fixup）#旋转操作的重要性#{1}":[2071,2074],"#红黑树#2. 红黑树的插入操作#2.2 插入后的修正（Insert Fixup）#插入修正的代码实现示例":[2075,2137],"#红黑树#2. 红黑树的插入操作#2.2 插入后的修正（Insert Fixup）#插入修正的代码实现示例#{1}":[2079,2137],"#红黑树#3. 红黑树的删除操作":[2138,2309],"#红黑树#3. 红黑树的删除操作#{1}":[2142,2150],"#红黑树#3. 红黑树的删除操作#3.1 删除步骤概述":[2151,2169],"#红黑树#3. 红黑树的删除操作#3.1 删除步骤概述#{1}":[2155,2169],"#红黑树#3. 红黑树的删除操作#3.2 删除后的修正（Delete Fixup）":[2170,2309],"#红黑树#3. 红黑树的删除操作#3.2 删除后的修正（Delete Fixup）#{1}":[2174,2177],"#红黑树#3. 红黑树的删除操作#3.2 删除后的修正（Delete Fixup）#修正步骤：":[2178,2221],"#红黑树#3. 红黑树的删除操作#3.2 删除后的修正（Delete Fixup）#修正步骤：#{1}":[2182,2221],"#红黑树#3. 红黑树的删除操作#3.2 删除后的修正（Delete Fixup）#删除修正的代码实现示例":[2222,2309],"#红黑树#3. 红黑树的删除操作#3.2 删除后的修正（Delete Fixup）#删除修正的代码实现示例#{1}":[2226,2309],"#红黑树#4. 旋转操作详解":[2310,2453],"#红黑树#4. 旋转操作详解#{1}":[2314,2317],"#红黑树#4. 旋转操作详解#4.1 左旋转（Left Rotate）":[2318,2380],"#红黑树#4. 旋转操作详解#4.1 左旋转（Left Rotate）#{1}":[2322,2380],"#红黑树#4. 旋转操作详解#4.2 右旋转（Right Rotate）":[2381,2443],"#红黑树#4. 旋转操作详解#4.2 右旋转（Right Rotate）#{1}":[2385,2443],"#红黑树#4. 旋转操作详解#旋转操作的作用":[2444,2453],"#红黑树#4. 旋转操作详解#旋转操作的作用#{1}":[2448,2453],"#红黑树#5.简化版红黑树实现":[2454,2669],"#红黑树#5.简化版红黑树实现#节点结构体":[2458,2486],"#红黑树#5.简化版红黑树实现#节点结构体#{1}":[2462,2486],"#红黑树#5.简化版红黑树实现#红黑树类":[2487,2648],"#红黑树#5.简化版红黑树实现#红黑树类#{1}":[2491,2648],"#红黑树#5.简化版红黑树实现#简要说明":[2649,2669],"#红黑树#5.简化版红黑树实现#简要说明#{1}":[2653,2669],"#红黑树#6. 红黑树与其他平衡树的比较":[2670,2702],"#红黑树#6. 红黑树与其他平衡树的比较#{1}":[2674,2677],"#红黑树#6. 红黑树与其他平衡树的比较#红黑树 vs AVL 树":[2678,2691],"#红黑树#6. 红黑树与其他平衡树的比较#红黑树 vs AVL 树#{1}":[2682,2691],"#红黑树#6. 红黑树与其他平衡树的比较#选择依据":[2692,2702],"#红黑树#6. 红黑树与其他平衡树的比较#选择依据#{1}":[2696,2696],"#红黑树#6. 红黑树与其他平衡树的比较#选择依据#{2}":[2697,2702],"#红黑树#7. 红黑树的应用场景":[2703,2723],"#红黑树#7. 红黑树的应用场景#{1}":[2707,2723]}},